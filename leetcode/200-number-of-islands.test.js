const isIsland = (A, i, j) => A[i][j] === '1' || A[i][j] === 1;

const traverseAndMark = (A, startCol, startRow, visited, n, m) => {
  const nodesToVisit = [[startCol, startRow]];
  const alreadyAdded = {};
  while (nodesToVisit.length > 0) {
    const [i, j] = nodesToVisit.shift();
    visited[i][j] = true;
    const candidates = [
      [i + 1, j],
      [i, j + 1],
      [i - 1, j],
      [i, j - 1],
    ].filter(
      ([x, y]) =>
        0 <= x &&
        x < n &&
        0 <= y &&
        y < m &&
        !alreadyAdded[`${x},${y}`] &&
        !visited[x][y] &&
        isIsland(A, x, y),
    );

    candidates.forEach(([x, y]) => {
      alreadyAdded[`${x},${y}`] = true;
    });

    nodesToVisit.push(...candidates);
  }
};
const numIslands = (grid) => {
  const n = grid.length;
  const m = grid[0] ? grid[0].length : 0;
  let islandsCount = 0;

  if (!n || !m) {
    return 0;
  }
  const visited = Array(n);

  for (let i = 0; i < n; i++) {
    visited[i] = Array(m).fill(0);
  }

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < m; j++) {
      if (visited[i][j]) {
        continue;
      }

      if (isIsland(grid, i, j)) {
        islandsCount += 1;
        visited[i][j] = true;
        traverseAndMark(grid, i, j, visited, n, m);
      }
    }
  }

  return islandsCount;
};

describe('numIslands', () => {
  it('case 1', () => {
    const grid = [
      [1, 1, 1, 1, 0],
      [1, 1, 0, 1, 0],
      [1, 1, 0, 0, 0],
      [0, 0, 0, 0, 0],
    ];
    expect(numIslands(grid)).toBe(1);
  });

  it('case 2', () => {
    const grid = [
      [1, 1, 0, 0, 0],
      [1, 1, 0, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 0, 1, 1],
    ];

    expect(numIslands(grid)).toBe(3);
  });

  it('case 3', () => {
    const grid = [
      ['1', '1', '0', '0', '0'],
      ['1', '1', '0', '0', '0'],
      ['0', '0', '1', '0', '0'],
      ['0', '0', '0', '1', '1'],
    ];
    expect(numIslands(grid)).toBe(3);
  });

  it('case 4', () => {
    expect(numIslands([])).toBe(0);
  });

  it('case 5', () => {
    expect(numIslands([[1, 1, 0, 0]])).toBe(1);
  });

  it('case 6', () => {
    const grid = [
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '0',
        '1',
        '1',
      ],
      [
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
      ],
      [
        '1',
        '0',
        '1',
        '1',
        '1',
        '0',
        '0',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '0',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
      ],
      [
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '0',
        '1',
        '1',
        '1',
        '1',
        '0',
        '0',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
      [
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
        '1',
      ],
    ];

    // expect(numIslands(grid)).toBe(10);
    const res = numIslands(grid);
    console.log({ res });
    expect(1).toBe(1);
  });
});
